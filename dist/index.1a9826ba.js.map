{"mappings":"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","sources":["src/utilities/TemplateGen.ts","src/elements/form-block.ts","src/utilities/validation.ts","src/elements/input-block.ts","src/elements/button-block.ts","src/pages/registration.ts","src/pages/authorization.ts","src/main.ts"],"sourcesContent":["//Генератор шаблонов\r\n//На вход подаётся строка с макросами в скобках {{}} и объект со значениями макросов\r\n//Пример:\r\n/*\r\n\tСтрока: '<div class=\"{{className}}\"></div>'\r\n\tОбъект: {className: 'test-class'}\r\n*/\r\n\r\nexport default class TemplateGen {\r\n\r\n\treadonly TEMPLATE_REGULAR = /\\{\\{(.*?)\\}\\}/;\r\n\r\n\treadonly templateBlock: string = \"\";\r\n\r\n\tconstructor(templateBlock: string) {\r\n\t\tthis.templateBlock = templateBlock\r\n\t}\r\n\r\n\tgenerateTemplate(template: Record<string, unknown>): string {\r\n\t\tif (template && this.templateBlock){\r\n\t\t\treturn this.changeTemplateKeys(template, this.templateBlock, this.TEMPLATE_REGULAR);\r\n\t\t}\r\n\t\treturn \"\";\r\n\t}\r\n\r\n\tchangeTemplateKeys(template, tmp, templateRegular): string {\r\n\t\tlet templateKeys = templateRegular.exec(tmp);\r\n\t\tif (templateKeys && templateKeys[1]){\r\n\t\t\tconst templateKey = templateKeys[1];\r\n\t\t\tfor (let key in template) {\r\n\t\t\t\tif (key == templateKeys[1]){\r\n\t\t\t\t\tif (typeof template[templateKey] == \"string\"){\r\n\t\t\t\t\t\ttmp = tmp.replace(templateKeys[0], template[templateKey]);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\t\t\t\r\n\t\t}\r\n\t\tif (templateRegular.exec(tmp)){\r\n\t\t\treturn this.changeTemplateKeys(template, tmp, templateRegular);\r\n\t\t} else {\r\n\t\t\treturn tmp;\r\n\t\t}\r\n\t}\r\n}","//Блок input\r\n\r\nimport TemplateGen from '../utilities/TemplateGen'\r\n\r\nconst formBlockTemplate = `\r\n\t<div class=\"reg-form-page\">\r\n\t\t<div class=\"reg-form-wrapper\">\r\n\t\t\t<h2>{{title}}</h2>\r\n\t\t\t<form class=\"reg-form\">\r\n\t\t\t\t<fieldset>\r\n\t\t\t\t\t<div class=\"reg-form-fieldset\"></div>\r\n\t\t\t\t\t<div class=\"form-block info-block\">{{errorInfo}}</div>\r\n\t\t\t\t\t<div class=\"form-block buttons-wrapper\"></div>\r\n\t\t\t\t</fieldset>\r\n\t\t\t</form>\r\n\t\t</div>\r\n\t</div>`;\r\n\r\nexport type FormParams = {\r\n\ttitle: string,\r\n\terrorInfo: string,\r\n};\r\n\r\nexport default class Form /*extends Block*/ {\r\n\tparams: FormParams\r\n\r\n\tconstructor(params: FormParams) {\r\n\t\tthis.params = params;\r\n\t\t//super('button', props, props.className)\r\n\t}\r\n\r\n\trender(): string {\r\n\t\treturn new TemplateGen(formBlockTemplate).generateTemplate(this.params);\r\n\t}\r\n\r\n\tinsertBlock(element: string, clean: boolean): void {\r\n\t\tconst inner = new DOMParser().parseFromString(new TemplateGen(formBlockTemplate).generateTemplate(this.params), \"text/html\").getElementsByTagName(\"div\")[0]; //this.element;\r\n\t\tconst wrapper = document.querySelector(element);\r\n\t\tif (!inner || !wrapper) return;\r\n\t\tif (clean){\r\n\t\t\twrapper.innerHTML = \"\";\r\n\t\t}\r\n\t\twrapper.appendChild(inner);\r\n\t}\r\n}\r\n\r\nexport function onSubmitForm(): void {\r\n\tconst form: HTMLFormElement  = document.querySelector('.reg-form');\r\n\tconsole.log(form);\r\n\tif (!form) return\r\n\r\n\t//Тут ещё сделать валидацию\r\n\tconst data: FormData = new FormData(form);\r\n\tconsole.log(...data);\r\n\r\n\t//if (formIsValid(form)) {\r\n\t//\tconst data: FormData = new FormData(form)\r\n\t//\tconsole.log(...data)\r\n\r\n\t\t//cb()\r\n\t//} else {\r\n\t\treturn;\r\n\t//}\r\n}","//Валидация\r\n\r\nconst validationRegex: Record<string, RegExp> = {\r\n\t//last_name: NAMEREGEX,\r\n\t//name: NAMEREGEX,\r\n\temail: new RegExp(/^([A-Za-z0-9_\\.-]+)@([A-Za-z0-9_\\.-]+)\\.([a-z\\.]{2,6})$/),\r\n\t//phone: PHONEREGEX,\r\n\t//password: PASSWORDREGEX,\r\n\t//login: LOGINREGEX\r\n}\r\n\r\nexport const validValue = function(input: HTMLInputElement): boolean {\r\n\tconst type = input.type;\r\n\tconst value = input.value;\r\n\tconst regex = validationRegex[type];\r\n\tconsole.log(regex)\r\n\tif (regex && !regex.test(value)) {\r\n\t\tinput.previousElementSibling?.classList.add('_wrong')\r\n\t\tinput.classList.add('_wrong')\r\n\t\treturn false\r\n\t}\r\n\r\n\treturn true\r\n}","//Блок input\r\n\r\nimport TemplateGen from '../utilities/TemplateGen'\r\nimport {validValue} from \"../utilities/validation\";\r\n\r\nconst inputBlockTemplate = `\r\n\t<div class=\"form-block\">\r\n\t\t<label class=\"form-label\" for=\"{{id}}\">{{label}}</label>\r\n\t\t<div class=\"input-wrapper {{errorHightlightClass}}\">\r\n\t\t\t<input class=\"form-control input-styles \" id=\"{{id}}\" type=\"{{type}}\" value=\"{{value}}\" name=\"{{name}}\">\r\n\t\t\t<div class=\"error-text-block\">{{errorText}}</div>\r\n\t\t</div>\r\n\t</div>`;\r\n\r\nexport type InputParams = {\r\n\telement: string,\r\n\tid: string,\r\n\tlabel: string,\r\n\tvalue: string,\r\n\ttype: string,\r\n\tname: string,\r\n\terrorText: string,\r\n\terrorHightlightClass: string,\r\n}\r\n\r\nexport default class Input /*extends Block*/ {\r\n\tparams: InputParams\r\n\r\n\tconstructor(params: InputParams) {\r\n\t\tthis.params = params;\r\n\t\t//super('button', props, props.className)\r\n\t}\r\n\r\n\trender(): string {\r\n\t\treturn new TemplateGen(inputBlockTemplate).generateTemplate(this.params);\r\n\t}\r\n\r\n\tinsertBlock(element: string): void {\r\n\t\tconst inner = new DOMParser().parseFromString(new TemplateGen(inputBlockTemplate).generateTemplate(this.params), \"text/html\").getElementsByTagName(\"div\")[0]; //this.element;\r\n\t\tconst wrapper = document.querySelector(element);\r\n\t\tif (!inner || !wrapper) return;\r\n\t\tlet input = inner.querySelector('input')\r\n\t\tinput.addEventListener('focus', function(){\r\n\t\t\tinput.classList.add('focus-input');\r\n\t\t});\r\n\t\tinput.addEventListener('blur', function(){\r\n\t\t\tinput.classList.remove('focus-input');\r\n\t\t\t//Тут ещё вызывать валидацию\r\n\t\t\tconsole.log(validValue(input))\r\n\t\t});\r\n\t\twrapper.appendChild(inner);\r\n\t}\r\n}","//Блок кнопки\r\n\r\nimport TemplateGen from '../utilities/TemplateGen'\r\n\r\nconst buttonBlockTemplate = `<button class=\"button-link {{classes}}\">{{name}}</button>`;\r\n\r\nexport type ButtonParams = {\r\n\telement: string,\r\n\tid: string,\r\n\tclasses: string,\r\n\tname: string,\r\n\tonClick: (event: Event) => void\r\n}\r\n\r\nexport default class Button /*extends Block*/ {\r\n\tparams: ButtonParams\r\n\r\n\tconstructor(params: ButtonParams) {\r\n\t\tthis.params = params;\r\n\t\t//super('button', props, props.className)\r\n\t}\r\n\r\n\trender(): string {\r\n\t\treturn new TemplateGen(buttonBlockTemplate).generateTemplate(this.params);\r\n\t}\r\n\r\n\tinsertBlock(element: string): void {\r\n\t\tconst inner = new DOMParser().parseFromString(new TemplateGen(buttonBlockTemplate).generateTemplate(this.params), \"text/html\").getElementsByTagName(\"button\")[0]; //this.element;\r\n\t\tconst wrapper = document.querySelector(element);\r\n\t\tif (!inner || !wrapper) return;\r\n\t\tinner.addEventListener('click', this.params.onClick);\r\n\t\twrapper.appendChild(inner);\r\n\t}\r\n}","//Страница регистрации\r\n\r\nimport TemplateGen from '../utilities/TemplateGen'\r\nimport Form, { FormParams, onSubmitForm }  from '../elements/form-block'\r\nimport Input, { InputParams }  from '../elements/input-block'\r\nimport Button, { ButtonParams }  from '../elements/button-block'\r\nimport authorization from './authorization'\r\n\r\nconst registrationForm: FormParams = {\r\n\ttitle: 'Регистрация',\r\n\terrorInfo: '',\r\n}\r\n\r\nconst registrationInputs: InputParams[] = [\r\n\t{\r\n\t\telement: '.reg-form-fieldset',\r\n\t\tid: 'email',\r\n\t\tname: 'email',\r\n\t\tlabel: 'E-mail',\r\n\t\tvalue: '',\r\n\t\ttype: 'text',\r\n\t\terrorText: '',\r\n\t\terrorHightlightClass: '', //error-input\r\n\t},\r\n\t{\r\n\t\telement: '.reg-form-fieldset',\r\n\t\tid: 'login',\r\n\t\tname: 'login',\r\n\t\tlabel: 'Логин',\r\n\t\tvalue: '',\r\n\t\ttype: 'text',\r\n\t\terrorText: '',\r\n\t\terrorHightlightClass: '', //error-input\r\n\t},\r\n\t{\r\n\t\telement: '.reg-form-fieldset',\r\n\t\tid: 'password',\r\n\t\tname: 'password',\r\n\t\tlabel: 'Пароль',\r\n\t\tvalue: '',\r\n\t\ttype: 'password',\r\n\t\terrorText: '',\r\n\t\terrorHightlightClass: '',\r\n\t},\r\n\t{\r\n\t\telement: '.reg-form-fieldset',\r\n\t\tid: 'repeatPassword',\r\n\t\tname: 'repeat_password',\r\n\t\tlabel: 'Повторите пароль',\r\n\t\tvalue: '',\r\n\t\ttype: 'password',\r\n\t\terrorText: '',\r\n\t\terrorHightlightClass: '',\r\n\t},\r\n];\r\n\r\nconst registrationButtons: ButtonParams[] = [\r\n\t{\r\n\t\telement: '.buttons-wrapper',\r\n\t\tid: '',\r\n\t\tname: 'Зарегистрироваться',\r\n\t\tclasses: 'add-link',\r\n\t\tonClick: (event) => {\r\n\t\t\tevent.preventDefault();\r\n\t\t\tonSubmitForm();\r\n\t\t},\r\n\t},\r\n\t{\r\n\t\telement: '.buttons-wrapper',\r\n\t\tid: '',\r\n\t\tname: 'Назад',\r\n\t\tclasses: 'reg-link',\r\n\t\tonClick: (event) => {\r\n\t\t\tevent.preventDefault();\r\n\t\t\tauthorization();\r\n\t\t},\r\n\t},\r\n]\r\n\r\nexport default function(): void {\r\n\r\n\tnew Form(registrationForm).insertBlock(\"#app\", true);\r\n\r\n\tregistrationInputs.forEach(function(input) {\r\n\t\tnew Input(input).insertBlock(input.element);\r\n\t});\r\n\r\n\tregistrationButtons.forEach(function(button) {\r\n\t\tnew Button(button).insertBlock(button.element);\r\n\t});\r\n}","//Страница авторизации\r\n\r\nimport TemplateGen from '../utilities/TemplateGen'\r\nimport Form, { FormParams, onSubmitForm }  from '../elements/form-block'\r\nimport Input, { InputParams }  from '../elements/input-block'\r\nimport Button, { ButtonParams }  from '../elements/button-block'\r\nimport registration from './registration'\r\n\r\nconst authorizationForm: FormParams = {\r\n\ttitle: 'Вход',\r\n\terrorInfo: '',\r\n}\r\n\r\nconst authorizationInputs: InputParams[] = [\r\n\t{\r\n\t\telement: '.reg-form-fieldset',\r\n\t\tid: 'login',\r\n\t\tname: 'login',\r\n\t\tlabel: 'Логин',\r\n\t\tvalue: '',\r\n\t\ttype: 'text',\r\n\t\terrorText: '',\r\n\t\terrorHightlightClass: '', //error-input\r\n\t},\r\n\t{\r\n\t\telement: '.reg-form-fieldset',\r\n\t\tid: 'password',\r\n\t\tname: 'password',\r\n\t\tlabel: 'Пароль',\r\n\t\tvalue: '',\r\n\t\ttype: 'password',\r\n\t\terrorText: '',\r\n\t\terrorHightlightClass: '',\r\n\t},\r\n];\r\n\r\nconst authorizationButtons: ButtonParams[] = [\r\n\t{\r\n\t\telement: '.buttons-wrapper',\r\n\t\tid: '',\r\n\t\tname: 'Авторизоваться',\r\n\t\tclasses: 'add-link',\r\n\t\tonClick: (event) => {\r\n\t\t\tevent.preventDefault();\r\n\t\t\tonSubmitForm();\r\n\t\t},\r\n\t},\r\n\t{\r\n\t\telement: '.buttons-wrapper',\r\n\t\tid: '',\r\n\t\tname: 'Зарегистрироваться',\r\n\t\tclasses: 'reg-link',\r\n\t\tonClick: (event) => {\r\n\t\t\tevent.preventDefault();\r\n\t\t\tregistration();\r\n\t\t},\r\n\t},\r\n]\r\n\r\nexport default function(): void {\r\n\r\n\tnew Form(authorizationForm).insertBlock(\"#app\", true);\r\n\r\n\tauthorizationInputs.forEach(function(input) {\r\n\t\tnew Input(input).insertBlock(input.element);\r\n\t});\r\n\r\n\tauthorizationButtons.forEach(function(button) {\r\n\t\tnew Button(button).insertBlock(button.element);\r\n\t});\r\n}","import './scss/init.scss';\r\nimport authorization from './pages/authorization'\r\n\r\nfunction ready() {\r\n\tauthorization();\r\n\r\n\t/*let regButton: any = document.getElementById(\"regButton\");\r\n\tconsole.log(regButton);\r\n\tif (regButton){\r\n\t\tregButton.addEventListener(\"click\", function(){\r\n\t\t\tconsole.log(regButton);\r\n\t\t\treturn false;\r\n\t\t});\r\n\t}*/\r\n\r\n}\r\n\r\ndocument.addEventListener(\"DOMContentLoaded\", ready);"],"names":["$ea179994c2e62f0e$export$2e2bcd8739ae039","TEMPLATE_REGULAR","templateBlock","constructor","this","generateTemplate","template","changeTemplateKeys","tmp","templateRegular","templateKeys","exec","templateKey","key","replace","$160682af531b0660$var$formBlockTemplate","params","render","insertBlock","element","clean","inner","DOMParser","parseFromString","getElementsByTagName","wrapper","document","querySelector","innerHTML","appendChild","$160682af531b0660$export$163d82ae5407ed7c","form","console","log","$c06e06c0e2a8e299$var$validationRegex","email","RegExp","$3b5868aba66e82f2$var$inputBlockTemplate","$3b5868aba66e82f2$export$2e2bcd8739ae039","input","addEventListener","classList","add","type","value","regex","test","previousElementSibling","$56aaf2b78fa10785$export$2e2bcd8739ae039","onClick","$fb81a59f87df34a9$var$registrationForm","title","errorInfo","$fb81a59f87df34a9$var$registrationInputs","id","name","label","errorText","errorHightlightClass","$fb81a59f87df34a9$var$registrationButtons","classes","event","preventDefault","$9d66ae0e255a5bf1$export$2e2bcd8739ae039","$9d66ae0e255a5bf1$var$authorizationForm","$9d66ae0e255a5bf1$var$authorizationInputs","$9d66ae0e255a5bf1$var$authorizationButtons","$160682af531b0660$export$2e2bcd8739ae039","forEach","button"],"version":3,"file":"index.1a9826ba.js.map","sourceRoot":"../"}