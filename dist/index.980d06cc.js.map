{"mappings":"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","sources":["src/utilities/TemplateGen.ts","src/utilities/validation.ts","src/elements/form-block.ts","src/elements/block.ts","src/elements/input-block.ts","src/elements/button-block.ts","src/pages/registration.ts","src/pages/authorization.ts","src/main.ts"],"sourcesContent":["//Генератор шаблонов\r\n//На вход подаётся строка с макросами в скобках {{}} и объект со значениями макросов\r\n//Пример:\r\n/*\r\n\tСтрока: '<div class=\"{{className}}\"></div>'\r\n\tОбъект: {className: 'test-class'}\r\n*/\r\n\r\nexport default class TemplateGen {\r\n\r\n\treadonly TEMPLATE_REGULAR = /\\{\\{(.*?)\\}\\}/;\r\n\r\n\treadonly templateBlock: string = \"\";\r\n\r\n\tconstructor(templateBlock: string) {\r\n\t\tthis.templateBlock = templateBlock\r\n\t}\r\n\r\n\tgenerateTemplate(template: Record<string, unknown>): string {\r\n\t\tif (template && this.templateBlock){\r\n\t\t\treturn this.changeTemplateKeys(template, this.templateBlock, this.TEMPLATE_REGULAR);\r\n\t\t}\r\n\t\treturn \"\";\r\n\t}\r\n\r\n\tchangeTemplateKeys(template, tmp, templateRegular): string {\r\n\t\tlet templateKeys = templateRegular.exec(tmp);\r\n\t\tif (templateKeys && templateKeys[1]){\r\n\t\t\tconst templateKey = templateKeys[1];\r\n\t\t\tfor (let key in template) {\r\n\t\t\t\tif (key == templateKeys[1]){\r\n\t\t\t\t\tlet templateValue = template[templateKey];\r\n\t\t\t\t\tif ((typeof templateValue != \"object\") && (typeof templateValue != \"function\")){\r\n\t\t\t\t\t\ttemplateValue = templateValue.toString()\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\ttemplateValue = \"\";\r\n\t\t\t\t\t}\r\n\t\t\t\t\ttmp = tmp.replace(templateKeys[0], templateValue);\r\n\t\t\t\t}\r\n\t\t\t}\t\t\t\r\n\t\t}\r\n\t\tif (templateRegular.exec(tmp)){\r\n\t\t\treturn this.changeTemplateKeys(template, tmp, templateRegular);\r\n\t\t} else {\r\n\t\t\treturn tmp;\r\n\t\t}\r\n\t}\r\n}","//Валидация\r\n\r\nconst defaultValidationErrorMessage = \"Возникла ошибка при заполнении формы. Пожалуйста, проверьте введённые данные.\";\r\nconst repeatPasswordErrorMessage = \"Пароли не совпадают.\";\r\nconst requiredFieldsErrorMessage = \"Не все обязательные поля заполнены.\";\r\n\r\nconst validationRegex: Record<string, RegExp> = {\r\n\temail: new RegExp(/^([A-Za-z0-9_\\.-]+)@([A-Za-z0-9_\\.-]+)\\.([a-z\\.]{2,6})$/),\r\n\tlogin: new RegExp(/^[A-Za-z0-9_\\.-]{3,20}$/),\r\n\tname: new RegExp(/^[A-ZА-Я][a-zA-Zа-яА-Я-]+$/),\r\n\tphone: new RegExp(/^\\+?\\d{10,15}$/),\r\n\tpassword: new RegExp(/^((?=.*?[A-Z])(?=.*?[0-9])\\S{8,40})\\S$/),\r\n};\r\n\r\nexport const validValue = function(input: HTMLInputElement): boolean {\r\n\tconst validationType = input.getAttribute(\"data-validation-type\");\r\n\tconst errorText = input.getAttribute(\"data-error-text\");\r\n\r\n\tconst value = input.value;\r\n\tconst regex = validationRegex[validationType];\r\n\r\n\tconst inputWrapper = input.parentElement;\r\n\tconst errorBlock = inputWrapper.querySelector(\".error-text-block\");\r\n\r\n\tif (regex && !regex.test(value)) {\r\n\t\tinputWrapper.classList.add('error-input');\r\n\t\tif (errorBlock){\r\n\t\t\tif (errorText){\r\n\t\t\t\terrorBlock.textContent = errorText;\r\n\t\t\t} else {\r\n\t\t\t\terrorBlock.textContent = defaultValidationErrorMessage;\r\n\t\t\t}\r\n\t\t}\t\t\r\n\t\treturn false;\r\n\t}\r\n\tinputWrapper.classList.remove('error-input');\r\n\tif (errorBlock){\r\n\t\terrorBlock.textContent = \"\";\r\n\t}\r\n\treturn true;\r\n}\r\n\r\nexport const validForm = function(form: HTMLFormElement): boolean {\r\n\tconst formBlocks = form.querySelectorAll('.form-block');\r\n\tconst infoBlock = form.querySelector(\".info-block\");\r\n\r\n\tlet isFormValid = true;\r\n\tlet password = \"\", repeatPassword = \"\";\r\n\r\n\tinfoBlock.textContent = \"\";\r\n\r\n\tformBlocks.forEach(function(formBlock) {\r\n\t\tlet input = formBlock.querySelector(\"input\");\r\n\t\tif (input){\r\n\t\t\tif (!formBlock.classList.contains(\"none-block\") && !validValue(input)) {\r\n\t\t\t\tisFormValid = false;\r\n\t\t\t}\r\n\t\t\tif (!input.value && input.getAttribute(\"data-required\") && !formBlock.classList.contains(\"none-block\")){\r\n\t\t\t\tisFormValid = false;\r\n\t\t\t\tinfoBlock.textContent = requiredFieldsErrorMessage;\r\n\t\t\t}\r\n\t\t\tif (input.name == \"password\"){\r\n\t\t\t\tpassword = input.value;\r\n\t\t\t}\r\n\t\t\tif (input.name == \"repeat_password\"){\r\n\t\t\t\trepeatPassword = input.value;\r\n\t\t\t}\r\n\t\t}\r\n\t});\r\n\t\r\n\tif (password && repeatPassword && (password != repeatPassword)){\r\n\t\tisFormValid = false;\r\n\t\tinfoBlock.textContent = repeatPasswordErrorMessage;\r\n\t}\t\r\n\treturn isFormValid;\r\n}","//Блок input\r\n\r\nimport TemplateGen from '../utilities/TemplateGen';\r\nimport {validForm} from \"../utilities/validation\";\r\n\r\nconst formBlockTemplate = `\r\n\t<div class=\"reg-form-page\">\r\n\t\t<div class=\"reg-form-wrapper\">\r\n\t\t\t<h2>{{title}}</h2>\r\n\t\t\t<form class=\"reg-form\">\r\n\t\t\t\t<fieldset>\r\n\t\t\t\t\t<div class=\"reg-form-fieldset\"></div>\r\n\t\t\t\t\t<div class=\"form-block info-block\"></div>\r\n\t\t\t\t\t<div class=\"form-block buttons-wrapper\"></div>\r\n\t\t\t\t</fieldset>\r\n\t\t\t</form>\r\n\t\t</div>\r\n\t</div>`;\r\n\r\nexport type FormParams = {\r\n\ttitle: string\r\n};\r\n\r\nexport default class Form /*extends Block*/ {\r\n\tparams: FormParams\r\n\r\n\tconstructor(params: FormParams) {\r\n\t\tthis.params = params;\r\n\t\t//super('button', props, props.className)\r\n\t}\r\n\r\n\trender(): string {\r\n\t\treturn new TemplateGen(formBlockTemplate).generateTemplate(this.params);\r\n\t}\r\n\r\n\tinsertBlock(element: string, clean: boolean): void {\r\n\t\tconst inner = new DOMParser().parseFromString(new TemplateGen(formBlockTemplate).generateTemplate(this.params), \"text/html\").getElementsByTagName(\"div\")[0]; //this.element;\r\n\t\tconst wrapper = document.querySelector(element);\r\n\t\tif (!inner || !wrapper) return;\r\n\t\tfor (let key in this.params){\r\n\t\t\tif (!this.params[key]){\r\n\t\t\t\tinner.removeAttribute(key);\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (clean){\r\n\t\t\twrapper.innerHTML = \"\";\r\n\t\t}\r\n\t\twrapper.appendChild(inner);\r\n\t}\r\n}\r\n\r\nexport function onSubmitForm(): void {\r\n\tconst form: HTMLFormElement  = document.querySelector('.reg-form');\r\n\tif (!form) return\r\n\r\n\tif (validForm(form)){\r\n\t\tconst data: FormData = new FormData(form);\r\n\t\tconsole.log(...data);\r\n\t}\r\n\treturn;\r\n}","//Блоки - общее\r\nimport TemplateGen from '../utilities/TemplateGen';\r\n\r\nexport default class Block {\r\n\tparams: Record<string, unknown>\r\n\ttemplate: string\r\n\tinsertedBlock: Record<string, unknown>\r\n\r\n\tconstructor(params: Record<string, unknown>, template: string) {\r\n\t\tthis.params = params;\r\n\t\tthis.template = template;\r\n\t}\r\n\r\n\trender(): string {\r\n\t\treturn new TemplateGen(this.template).generateTemplate(this.params);;\r\n\t}\r\n\r\n\tinsertBlock(element: string, clean: boolean): Record<string, unknown> {\r\n\t\tconst inner = new DOMParser().parseFromString(new TemplateGen(this.template).generateTemplate(this.params), \"text/html\").getElementsByTagName(\"body\")[0].childNodes[0]; //this.element;\r\n\t\tconst wrapper = document.querySelector(element);\r\n\t\tif (!inner || !wrapper) return {};\r\n\t\tfor (let key in this.params){\r\n\t\t\tif (!this.params[key]){\r\n\t\t\t\tinner.removeAttribute(key);\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (clean){\r\n\t\t\twrapper.innerHTML = \"\";\r\n\t\t}\r\n\t\treturn {\r\n\t\t\tinner: inner,\r\n\t\t\twrapper: wrapper\r\n\t\t}\r\n\t}\r\n}","//Блок input\r\n\r\nimport Block from '../elements/block';\r\nimport {validValue} from \"../utilities/validation\";\r\n\r\nconst inputBlockTemplate = `\r\n\t<div class=\"form-block {{classList}}\">\r\n\t\t<label class=\"form-label\" for=\"{{id}}\">{{label}}</label>\r\n\t\t<div class=\"input-wrapper\">\r\n\t\t\t<input class=\"form-control input-styles\" data-required=\"{{required}}\" data-error-text=\"{{errorText}}\" data-validation-type=\"{{validationType}}\" id=\"{{id}}\" type=\"{{type}}\" value=\"{{value}}\" name=\"{{name}}\">\r\n\t\t\t<div class=\"error-text-block\"></div>\r\n\t\t</div>\r\n\t</div>`;\r\n\r\nexport type InputParams = {\r\n\telement: string,\r\n\tid: string,\r\n\tlabel: string,\r\n\tvalue: string,\r\n\ttype: string,\r\n\tname: string,\r\n\trequired: boolean,\r\n\terrorText: string,\r\n\tvalidationType: string,\r\n\tclassList: string,\r\n}\r\n\r\nexport default class Input extends Block {\r\n\t//params: InputParams\r\n\r\n\tconstructor(params: InputParams, template: string) {\r\n\t\tif (!template){\r\n\t\t\ttemplate = inputBlockTemplate;\r\n\t\t}\r\n\t\tsuper(params, template);\r\n\t}\r\n\r\n\tinsertBlock(element: string, clean: boolean): Record<string, unknown> {\r\n\r\n\t\tlet insertedBlock = super.insertBlock(element, clean);\r\n\t\tif (insertedBlock.inner && insertedBlock.wrapper){\r\n\t\t\tlet inner = insertedBlock.inner;\r\n\t\t\tlet wrapper = insertedBlock.wrapper;\r\n\r\n\t\t\tlet input = inner.querySelector('input')\r\n\t\t\tinput.addEventListener('focus', function(){\r\n\t\t\t\tinput.classList.add('focus-input');\r\n\t\t\t});\r\n\t\t\tinput.addEventListener('blur', function(){\r\n\t\t\t\tinput.classList.remove('focus-input');\r\n\t\t\t\tvalidValue(input);\r\n\t\t\t});\r\n\t\t\twrapper.appendChild(inner);\r\n\t\t}\r\n\t\treturn {};\r\n\t}\r\n}","//Блок кнопки\r\n\r\nimport Block from '../elements/block';\r\n\r\nconst buttonBlockTemplate = `<button id=\"{{id}}\" class=\"button-link {{classes}}\">{{name}}</button>`;\r\n\r\nexport type ButtonParams = {\r\n\telement: string,\r\n\tid: string,\r\n\tclasses: string,\r\n\tname: string,\r\n\tonClick: (event: Event) => void\r\n}\r\n\r\nexport default class Button extends Block {\r\n\tparams: ButtonParams\r\n\r\n\tconstructor(params: ButtonParams, template: string) {\r\n\t\tif (!template){\r\n\t\t\ttemplate = buttonBlockTemplate;\r\n\t\t}\r\n\t\tsuper(params, template);\r\n\t}\r\n\r\n\tinsertBlock(element: string, clean: boolean): Record<string, unknown> {\r\n\t\tlet insertedBlock = super.insertBlock(element, clean);\r\n\t\tif (insertedBlock.inner && insertedBlock.wrapper){\r\n\t\t\tlet inner = insertedBlock.inner;\r\n\t\t\tlet wrapper = insertedBlock.wrapper;\r\n\t\t\tinner.addEventListener('click', this.params.onClick);\r\n\t\t\twrapper.appendChild(inner);\r\n\t\t}\r\n\t\treturn {};\r\n\t}\r\n}","//Страница регистрации\r\n\r\nimport TemplateGen from '../utilities/TemplateGen';\r\nimport Form, { FormParams, onSubmitForm }  from '../elements/form-block';\r\nimport Input, { InputParams }  from '../elements/input-block';\r\nimport Button, { ButtonParams }  from '../elements/button-block';\r\nimport authorization from './authorization';\r\n\r\nconst registrationForm: FormParams = {\r\n\ttitle: 'Регистрация'\r\n}\r\n\r\nconst registrationInputs: InputParams[] = [\r\n\t{\r\n\t\telement: '.reg-form-fieldset',\r\n\t\tid: 'email',\r\n\t\tname: 'email',\r\n\t\tlabel: 'E-mail',\r\n\t\tvalue: '',\r\n\t\ttype: 'text',\r\n\t\trequired: true,\r\n\t\terrorText: 'Неверный формат email',\r\n\t\tvalidationType: 'email',\r\n\t\tclassList: '',\r\n\t},\r\n\t{\r\n\t\telement: '.reg-form-fieldset',\r\n\t\tid: 'login',\r\n\t\tname: 'login',\r\n\t\tlabel: 'Логин',\r\n\t\tvalue: '',\r\n\t\ttype: 'text',\r\n\t\trequired: true,\r\n\t\terrorText: 'Логин должен содержать от 3 до 20 латинских символов, может содержать цифры, но не состоять из них, без пробелов, без спецсимволов',\r\n\t\tvalidationType: 'login',\r\n\t\tclassList: '',\r\n\t},\r\n\t{\r\n\t\telement: '.reg-form-fieldset',\r\n\t\tid: 'secondName',\r\n\t\tname: 'second_name',\r\n\t\tlabel: 'Фамилия',\r\n\t\tvalue: '',\r\n\t\ttype: 'text',\r\n\t\trequired: true,\r\n\t\terrorText: 'Первая буква должна быть заглавной, без пробелов, цифр и спецсимволов, кроме дефиса',\r\n\t\tvalidationType: 'name',\r\n\t\tclassList: '',\r\n\t},\r\n\t{\r\n\t\telement: '.reg-form-fieldset',\r\n\t\tid: 'firstName',\r\n\t\tname: 'first_name',\r\n\t\tlabel: 'Имя',\r\n\t\tvalue: '',\r\n\t\ttype: 'text',\r\n\t\trequired: true,\r\n\t\terrorText: 'Первая буква должна быть заглавной, без пробелов, цифр и спецсимволов, кроме дефиса',\r\n\t\tvalidationType: 'name',\r\n\t\tclassList: '',\r\n\t},\r\n\t{\r\n\t\telement: '.reg-form-fieldset',\r\n\t\tid: 'phone',\r\n\t\tname: 'phone',\r\n\t\tlabel: 'Телефон',\r\n\t\tvalue: '',\r\n\t\ttype: 'text',\r\n\t\trequired: true,\r\n\t\terrorText: 'Телефон должен содержать от 10 до 15 символов, состоит из цифр, может начинаться с плюса',\r\n\t\tvalidationType: 'phone',\r\n\t\tclassList: '',\r\n\t},\r\n\t{\r\n\t\telement: '.reg-form-fieldset',\r\n\t\tid: 'password',\r\n\t\tname: 'password',\r\n\t\tlabel: 'Пароль',\r\n\t\tvalue: '',\r\n\t\ttype: 'password',\r\n\t\trequired: true,\r\n\t\terrorText: 'Пароль должен содержать от 8 до 40 символов, обязательно хотя бы одну заглавную букву и цифру',\r\n\t\tvalidationType: 'password',\r\n\t\tclassList: '',\r\n\t},\r\n\t{\r\n\t\telement: '.reg-form-fieldset',\r\n\t\tid: 'repeatPassword',\r\n\t\tname: 'repeat_password',\r\n\t\tlabel: 'Повторите пароль',\r\n\t\tvalue: '',\r\n\t\ttype: 'password',\r\n\t\trequired: true,\r\n\t\terrorText: 'Пароль должен содержать от 8 до 40 символов, обязательно хотя бы одну заглавную букву и цифру',\r\n\t\tvalidationType: 'password',\r\n\t\tclassList: '',\r\n\t},\r\n];\r\n\r\nconst registrationButtons: ButtonParams[] = [\r\n\t{\r\n\t\telement: '.buttons-wrapper',\r\n\t\tid: '',\r\n\t\tname: 'Зарегистрироваться',\r\n\t\tclasses: 'add-link',\r\n\t\tonClick: (event) => {\r\n\t\t\tevent.preventDefault();\r\n\t\t\tonSubmitForm();\r\n\t\t},\r\n\t},\r\n\t{\r\n\t\telement: '.buttons-wrapper',\r\n\t\tid: '',\r\n\t\tname: 'Назад',\r\n\t\tclasses: 'reg-link',\r\n\t\tonClick: (event) => {\r\n\t\t\tevent.preventDefault();\r\n\t\t\tauthorization();\r\n\t\t},\r\n\t},\r\n]\r\n\r\nexport default function(): void {\r\n\r\n\tnew Form(registrationForm).insertBlock(\"#app\", true);\r\n\r\n\tregistrationInputs.forEach(function(input) {\r\n\t\tnew Input(input).insertBlock(input.element);\r\n\t});\r\n\r\n\tregistrationButtons.forEach(function(button) {\r\n\t\tnew Button(button).insertBlock(button.element);\r\n\t});\r\n}","//Страница авторизации\r\n\r\nimport TemplateGen from '../utilities/TemplateGen';\r\nimport Form, { FormParams, onSubmitForm }  from '../elements/form-block';\r\nimport Input, { InputParams }  from '../elements/input-block';\r\nimport Button, { ButtonParams }  from '../elements/button-block';\r\nimport registration from './registration';\r\n\r\n//import profile from './profile';\r\n\r\nconst authorizationForm: FormParams = {\r\n\ttitle: 'Вход',\r\n}\r\n\r\nconst authorizationInputs: InputParams[] = [\r\n\t{\r\n\t\telement: '.reg-form-fieldset',\r\n\t\tid: 'login',\r\n\t\tname: 'login',\r\n\t\tlabel: 'Логин',\r\n\t\tvalue: '',\r\n\t\ttype: 'text',\r\n\t\trequired: true,\r\n\t\terrorText: '',\r\n\t\tvalidationType: '',\r\n\t\tclassList: '',\r\n\t},\r\n\t{\r\n\t\telement: '.reg-form-fieldset',\r\n\t\tid: 'password',\r\n\t\tname: 'password',\r\n\t\tlabel: 'Пароль',\r\n\t\tvalue: '',\r\n\t\ttype: 'password',\r\n\t\trequired: true,\r\n\t\terrorText: '',\r\n\t\tvalidationType: '',\r\n\t\tclassList: '',\r\n\t},\r\n];\r\n\r\nconst authorizationButtons: ButtonParams[] = [\r\n\t{\r\n\t\telement: '.buttons-wrapper',\r\n\t\tid: '',\r\n\t\tname: 'Авторизоваться',\r\n\t\tclasses: 'add-link',\r\n\t\tonClick: (event) => {\r\n\t\t\tevent.preventDefault();\r\n\t\t\tonSubmitForm();\r\n\t\t},\r\n\t},\r\n\t{\r\n\t\telement: '.buttons-wrapper',\r\n\t\tid: '',\r\n\t\tname: 'Зарегистрироваться',\r\n\t\tclasses: 'reg-link',\r\n\t\tonClick: (event) => {\r\n\t\t\tevent.preventDefault();\r\n\t\t\tregistration();\r\n\t\t\t//profile();\r\n\t\t},\r\n\t},\r\n]\r\n\r\nexport default function(): void {\r\n\r\n\tnew Form(authorizationForm).insertBlock(\"#app\", true);\r\n\r\n\tauthorizationInputs.forEach(function(input) {\r\n\t\tnew Input(input, '').insertBlock(input.element);\r\n\t});\r\n\r\n\tauthorizationButtons.forEach(function(button) {\r\n\t\tnew Button(button).insertBlock(button.element);\r\n\t});\r\n}","import './scss/init.scss';\r\nimport authorization from './pages/authorization';\r\nimport error from './pages/error';\r\n\r\nfunction ready() {\r\n\tauthorization();\r\n}\r\n\r\ndocument.addEventListener(\"DOMContentLoaded\", ready);"],"names":["$973bede13e903614$export$2e2bcd8739ae039","TEMPLATE_REGULAR","templateBlock","constructor","this","generateTemplate","template","changeTemplateKeys","tmp","templateRegular","templateKeys","exec","templateKey","key","templateValue","toString","replace","$ee188ca8cb13b1d3$var$validationRegex","email","RegExp","login","name","phone","password","$ee188ca8cb13b1d3$export$5ca26c99531348ec","input","validationType","getAttribute","errorText","value","regex","inputWrapper","parentElement","errorBlock","querySelector","test","classList","add","textContent","remove","$ae202c0a4cbfb8e0$var$formBlockTemplate","params","render","insertBlock","element","clean","inner","DOMParser","parseFromString","getElementsByTagName","wrapper","document","removeAttribute","innerHTML","form","formBlocks","querySelectorAll","infoBlock","isFormValid","repeatPassword","forEach","formBlock","contains","$f7247865aae568d1$export$2e2bcd8739ae039","childNodes","super","insertedBlock","addEventListener","$7754adb433268645$export$2e2bcd8739ae039","onClick","appendChild","$e7d9c4fff4870b96$var$registrationForm","title","$e7d9c4fff4870b96$var$registrationInputs","id","label","type","required","$e7d9c4fff4870b96$var$registrationButtons","classes","event","preventDefault","$ae202c0a4cbfb8e0$export$163d82ae5407ed7c","$91695f1c427861cf$export$2e2bcd8739ae039","$91695f1c427861cf$var$authorizationForm","$91695f1c427861cf$var$authorizationInputs","$91695f1c427861cf$var$authorizationButtons","$ae202c0a4cbfb8e0$export$2e2bcd8739ae039","$002a4a3e1848043a$export$2e2bcd8739ae039","button"],"version":3,"file":"index.980d06cc.js.map","sourceRoot":"../"}