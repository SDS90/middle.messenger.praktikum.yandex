{"mappings":"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","sources":["src/utilities/TemplateGen.ts","src/utilities/validation.ts","src/elements/form-block.ts","src/elements/input-block.ts","src/elements/button-block.ts","src/pages/registration.ts","src/pages/authorization.ts","src/main.ts"],"sourcesContent":["//Генератор шаблонов\r\n//На вход подаётся строка с макросами в скобках {{}} и объект со значениями макросов\r\n//Пример:\r\n/*\r\n\tСтрока: '<div class=\"{{className}}\"></div>'\r\n\tОбъект: {className: 'test-class'}\r\n*/\r\n\r\nexport default class TemplateGen {\r\n\r\n\treadonly TEMPLATE_REGULAR = /\\{\\{(.*?)\\}\\}/;\r\n\r\n\treadonly templateBlock: string = \"\";\r\n\r\n\tconstructor(templateBlock: string) {\r\n\t\tthis.templateBlock = templateBlock\r\n\t}\r\n\r\n\tgenerateTemplate(template: Record<string, unknown>): string {\r\n\t\tif (template && this.templateBlock){\r\n\t\t\treturn this.changeTemplateKeys(template, this.templateBlock, this.TEMPLATE_REGULAR);\r\n\t\t}\r\n\t\treturn \"\";\r\n\t}\r\n\r\n\tchangeTemplateKeys(template, tmp, templateRegular): string {\r\n\t\tlet templateKeys = templateRegular.exec(tmp);\r\n\t\tif (templateKeys && templateKeys[1]){\r\n\t\t\tconst templateKey = templateKeys[1];\r\n\t\t\tfor (let key in template) {\r\n\t\t\t\tif (key == templateKeys[1]){\r\n\t\t\t\t\tlet templateValue = template[templateKey];\r\n\t\t\t\t\tif ((typeof templateValue != \"object\") && (typeof templateValue != \"function\")){\r\n\t\t\t\t\t\ttmp = tmp.replace(templateKeys[0], templateValue.toString());\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\t\t\t\r\n\t\t}\r\n\t\tif (templateRegular.exec(tmp)){\r\n\t\t\treturn this.changeTemplateKeys(template, tmp, templateRegular);\r\n\t\t} else {\r\n\t\t\treturn tmp;\r\n\t\t}\r\n\t}\r\n}","//Валидация\r\n\r\nconst defaultValidationErrorMessage = \"Возникла ошибка при заполнении формы. Пожалуйста, проверьте введённые данные.\";\r\nconst repeatPasswordErrorMessage = \"Пароли не совпадают.\";\r\nconst requiredFieldsErrorMessage = \"Не все обязательные поля заполнены.\";\r\n\r\nconst validationRegex: Record<string, RegExp> = {\r\n\temail: new RegExp(/^([A-Za-z0-9_\\.-]+)@([A-Za-z0-9_\\.-]+)\\.([a-z\\.]{2,6})$/),\r\n\tlogin: new RegExp(/^[A-Za-z0-9_\\.-]{3,20}$/),\r\n\tname: new RegExp(/^[A-ZА-Я][a-zA-Zа-яА-Я-]+$/),\r\n\tphone: new RegExp(/^\\+?\\d{10,15}$/),\r\n\tpassword: new RegExp(/^((?=.*?[A-Z])(?=.*?[0-9])\\S{8,40})\\S$/),\r\n};\r\n\r\nexport const validValue = function(input: HTMLInputElement): boolean {\r\n\tconst validationType = input.getAttribute(\"data-validation-type\");\r\n\tconst errorText = input.getAttribute(\"data-error-text\");\r\n\r\n\tconst value = input.value;\r\n\tconst regex = validationRegex[validationType];\r\n\r\n\tconst inputWrapper = input.parentElement;\r\n\tconst errorBlock = inputWrapper.querySelector(\".error-text-block\");\r\n\r\n\tif (regex && !regex.test(value)) {\r\n\t\tinputWrapper.classList.add('error-input');\r\n\t\tif (errorBlock){\r\n\t\t\tif (errorText){\r\n\t\t\t\terrorBlock.textContent = errorText;\r\n\t\t\t} else {\r\n\t\t\t\terrorBlock.textContent = defaultValidationErrorMessage;\r\n\t\t\t}\r\n\t\t}\t\t\r\n\t\treturn false;\r\n\t}\r\n\tinputWrapper.classList.remove('error-input');\r\n\tif (errorBlock){\r\n\t\terrorBlock.textContent = \"\";\r\n\t}\r\n\treturn true;\r\n}\r\n\r\nexport const validForm = function(form: HTMLFormElement): boolean {\r\n\tconst inputs = form.querySelectorAll('input');\r\n\tconst infoBlock = form.querySelector(\".info-block\");\r\n\r\n\tlet isFormValid = true;\r\n\tlet password = \"\", repeatPassword = \"\";\r\n\r\n\tinfoBlock.textContent = \"\";\r\n\r\n\tinputs.forEach(function(input) {\r\n\t\t\r\n\t\tif (!validValue(input)) {\r\n\t\t\tisFormValid = false;\r\n\t\t}\r\n\t\tif (!input.value && input.getAttribute(\"data-required\")){\r\n\t\t\tisFormValid = false;\r\n\t\t\tinfoBlock.textContent = requiredFieldsErrorMessage;\r\n\t\t}\r\n\t\tif (input.name == \"password\"){\r\n\t\t\tpassword = input.value;\r\n\t\t}\r\n\t\tif (input.name == \"repeat_password\"){\r\n\t\t\trepeatPassword = input.value;\r\n\t\t}\r\n\t});\r\n\t\r\n\tif (password && repeatPassword && (password != repeatPassword)){\r\n\t\tisFormValid = false;\r\n\t\tinfoBlock.textContent = repeatPasswordErrorMessage;\r\n\t}\t\r\n\treturn isFormValid;\r\n}","//Блок input\r\n\r\nimport TemplateGen from '../utilities/TemplateGen';\r\nimport {validForm} from \"../utilities/validation\";\r\n\r\nconst formBlockTemplate = `\r\n\t<div class=\"reg-form-page\">\r\n\t\t<div class=\"reg-form-wrapper\">\r\n\t\t\t<h2>{{title}}</h2>\r\n\t\t\t<form class=\"reg-form\">\r\n\t\t\t\t<fieldset>\r\n\t\t\t\t\t<div class=\"reg-form-fieldset\"></div>\r\n\t\t\t\t\t<div class=\"form-block info-block\"></div>\r\n\t\t\t\t\t<div class=\"form-block buttons-wrapper\"></div>\r\n\t\t\t\t</fieldset>\r\n\t\t\t</form>\r\n\t\t</div>\r\n\t</div>`;\r\n\r\nexport type FormParams = {\r\n\ttitle: string\r\n};\r\n\r\nexport default class Form /*extends Block*/ {\r\n\tparams: FormParams\r\n\r\n\tconstructor(params: FormParams) {\r\n\t\tthis.params = params;\r\n\t\t//super('button', props, props.className)\r\n\t}\r\n\r\n\trender(): string {\r\n\t\treturn new TemplateGen(formBlockTemplate).generateTemplate(this.params);\r\n\t}\r\n\r\n\tinsertBlock(element: string, clean: boolean): void {\r\n\t\tconst inner = new DOMParser().parseFromString(new TemplateGen(formBlockTemplate).generateTemplate(this.params), \"text/html\").getElementsByTagName(\"div\")[0]; //this.element;\r\n\t\tconst wrapper = document.querySelector(element);\r\n\t\tif (!inner || !wrapper) return;\r\n\t\tif (clean){\r\n\t\t\twrapper.innerHTML = \"\";\r\n\t\t}\r\n\t\twrapper.appendChild(inner);\r\n\t}\r\n}\r\n\r\nexport function onSubmitForm(): void {\r\n\tconst form: HTMLFormElement  = document.querySelector('.reg-form');\r\n\tconsole.log(form);\r\n\tif (!form) return\r\n\r\n\tif (validForm(form)){\r\n\t\tconst data: FormData = new FormData(form);\r\n\t\tconsole.log(...data);\r\n\t}\r\n\r\n\t//if (formIsValid(form)) {\r\n\t//\tconst data: FormData = new FormData(form)\r\n\t//\tconsole.log(...data)\r\n\r\n\t\t//cb()\r\n\t//} else {\r\n\t\treturn;\r\n\t//}\r\n}","//Блок input\r\n\r\nimport TemplateGen from '../utilities/TemplateGen';\r\nimport {validValue} from \"../utilities/validation\";\r\n\r\nconst inputBlockTemplate = `\r\n\t<div class=\"form-block\">\r\n\t\t<label class=\"form-label\" for=\"{{id}}\">{{label}}</label>\r\n\t\t<div class=\"input-wrapper\">\r\n\t\t\t<input class=\"form-control input-styles\" data-required=\"{{required}}\" data-error-text=\"{{errorText}}\" data-validation-type=\"{{validationType}}\" id=\"{{id}}\" type=\"{{type}}\" value=\"{{value}}\" name=\"{{name}}\">\r\n\t\t\t<div class=\"error-text-block\"></div>\r\n\t\t</div>\r\n\t</div>`;\r\n\r\nexport type InputParams = {\r\n\telement: string,\r\n\tid: string,\r\n\tlabel: string,\r\n\tvalue: string,\r\n\ttype: string,\r\n\tname: string,\r\n\trequired: boolean,\r\n\terrorText: string,\r\n\tvalidationType: string,\r\n}\r\n\r\nexport default class Input /*extends Block*/ {\r\n\tparams: InputParams\r\n\r\n\tconstructor(params: InputParams) {\r\n\t\tthis.params = params;\r\n\t\t//super('button', props, props.className)\r\n\t}\r\n\r\n\trender(): string {\r\n\t\treturn new TemplateGen(inputBlockTemplate).generateTemplate(this.params);\r\n\t}\r\n\r\n\tinsertBlock(element: string): void {\r\n\t\tconst inner = new DOMParser().parseFromString(new TemplateGen(inputBlockTemplate).generateTemplate(this.params), \"text/html\").getElementsByTagName(\"div\")[0]; //this.element;\r\n\t\tconst wrapper = document.querySelector(element);\r\n\t\tif (!inner || !wrapper) return;\r\n\t\tlet input = inner.querySelector('input')\r\n\t\tinput.addEventListener('focus', function(){\r\n\t\t\tinput.classList.add('focus-input');\r\n\t\t});\r\n\t\tinput.addEventListener('blur', function(){\r\n\t\t\tinput.classList.remove('focus-input');\r\n\t\t\tvalidValue(input);\r\n\t\t});\r\n\t\twrapper.appendChild(inner);\r\n\t}\r\n}","//Блок кнопки\r\n\r\nimport TemplateGen from '../utilities/TemplateGen';\r\n\r\nconst buttonBlockTemplate = `<button class=\"button-link {{classes}}\">{{name}}</button>`;\r\n\r\nexport type ButtonParams = {\r\n\telement: string,\r\n\tid: string,\r\n\tclasses: string,\r\n\tname: string,\r\n\tonClick: (event: Event) => void\r\n}\r\n\r\nexport default class Button /*extends Block*/ {\r\n\tparams: ButtonParams\r\n\r\n\tconstructor(params: ButtonParams) {\r\n\t\tthis.params = params;\r\n\t\t//super('button', props, props.className)\r\n\t}\r\n\r\n\trender(): string {\r\n\t\treturn new TemplateGen(buttonBlockTemplate).generateTemplate(this.params);\r\n\t}\r\n\r\n\tinsertBlock(element: string): void {\r\n\t\tconst inner = new DOMParser().parseFromString(new TemplateGen(buttonBlockTemplate).generateTemplate(this.params), \"text/html\").getElementsByTagName(\"button\")[0]; //this.element;\r\n\t\tconst wrapper = document.querySelector(element);\r\n\t\tif (!inner || !wrapper) return;\r\n\t\tinner.addEventListener('click', this.params.onClick);\r\n\t\twrapper.appendChild(inner);\r\n\t}\r\n}","//Страница регистрации\r\n\r\nimport TemplateGen from '../utilities/TemplateGen';\r\nimport Form, { FormParams, onSubmitForm }  from '../elements/form-block';\r\nimport Input, { InputParams }  from '../elements/input-block';\r\nimport Button, { ButtonParams }  from '../elements/button-block';\r\nimport authorization from './authorization';\r\n\r\nconst registrationForm: FormParams = {\r\n\ttitle: 'Регистрация'\r\n}\r\n\r\nconst registrationInputs: InputParams[] = [\r\n\t{\r\n\t\telement: '.reg-form-fieldset',\r\n\t\tid: 'email',\r\n\t\tname: 'email',\r\n\t\tlabel: 'E-mail',\r\n\t\tvalue: '',\r\n\t\ttype: 'text',\r\n\t\trequired: true,\r\n\t\terrorText: 'Неверный формат email',\r\n\t\tvalidationType: 'email',\r\n\t},\r\n\t{\r\n\t\telement: '.reg-form-fieldset',\r\n\t\tid: 'login',\r\n\t\tname: 'login',\r\n\t\tlabel: 'Логин',\r\n\t\tvalue: '',\r\n\t\ttype: 'text',\r\n\t\trequired: true,\r\n\t\terrorText: 'Логин должен содержать от 3 до 20 латинских символов, может содержать цифры, но не состоять из них, без пробелов, без спецсимволов',\r\n\t\tvalidationType: 'login',\r\n\t},\r\n\t{\r\n\t\telement: '.reg-form-fieldset',\r\n\t\tid: 'secondName',\r\n\t\tname: 'second_name',\r\n\t\tlabel: 'Фамилия',\r\n\t\tvalue: '',\r\n\t\ttype: 'text',\r\n\t\trequired: true,\r\n\t\terrorText: 'Первая буква должна быть заглавной, без пробелов, цифр и спецсимволов, кроме дефиса',\r\n\t\tvalidationType: 'name',\r\n\t},\r\n\t{\r\n\t\telement: '.reg-form-fieldset',\r\n\t\tid: 'firstName',\r\n\t\tname: 'first_name',\r\n\t\tlabel: 'Имя',\r\n\t\tvalue: '',\r\n\t\ttype: 'text',\r\n\t\trequired: true,\r\n\t\terrorText: 'Первая буква должна быть заглавной, без пробелов, цифр и спецсимволов, кроме дефиса',\r\n\t\tvalidationType: 'name',\r\n\t},\r\n\t{\r\n\t\telement: '.reg-form-fieldset',\r\n\t\tid: 'phone',\r\n\t\tname: 'phone',\r\n\t\tlabel: 'Телефон',\r\n\t\tvalue: '',\r\n\t\ttype: 'text',\r\n\t\trequired: true,\r\n\t\terrorText: 'Телефон должен содержать от 10 до 15 символов, состоит из цифр, может начинаться с плюса',\r\n\t\tvalidationType: 'phone',\r\n\t},\r\n\t{\r\n\t\telement: '.reg-form-fieldset',\r\n\t\tid: 'password',\r\n\t\tname: 'password',\r\n\t\tlabel: 'Пароль',\r\n\t\tvalue: '',\r\n\t\ttype: 'password',\r\n\t\trequired: true,\r\n\t\terrorText: 'Пароль должен содержать от 8 до 40 символов, обязательно хотя бы одну заглавную букву и цифру',\r\n\t\tvalidationType: 'password',\r\n\t},\r\n\t{\r\n\t\telement: '.reg-form-fieldset',\r\n\t\tid: 'repeatPassword',\r\n\t\tname: 'repeat_password',\r\n\t\tlabel: 'Повторите пароль',\r\n\t\tvalue: '',\r\n\t\ttype: 'password',\r\n\t\trequired: true,\r\n\t\terrorText: 'Пароль должен содержать от 8 до 40 символов, обязательно хотя бы одну заглавную букву и цифру',\r\n\t\tvalidationType: 'password',\r\n\t},\r\n];\r\n\r\nconst registrationButtons: ButtonParams[] = [\r\n\t{\r\n\t\telement: '.buttons-wrapper',\r\n\t\tid: '',\r\n\t\tname: 'Зарегистрироваться',\r\n\t\tclasses: 'add-link',\r\n\t\tonClick: (event) => {\r\n\t\t\tevent.preventDefault();\r\n\t\t\tonSubmitForm();\r\n\t\t},\r\n\t},\r\n\t{\r\n\t\telement: '.buttons-wrapper',\r\n\t\tid: '',\r\n\t\tname: 'Назад',\r\n\t\tclasses: 'reg-link',\r\n\t\tonClick: (event) => {\r\n\t\t\tevent.preventDefault();\r\n\t\t\tauthorization();\r\n\t\t},\r\n\t},\r\n]\r\n\r\nexport default function(): void {\r\n\r\n\tnew Form(registrationForm).insertBlock(\"#app\", true);\r\n\r\n\tregistrationInputs.forEach(function(input) {\r\n\t\tnew Input(input).insertBlock(input.element);\r\n\t});\r\n\r\n\tregistrationButtons.forEach(function(button) {\r\n\t\tnew Button(button).insertBlock(button.element);\r\n\t});\r\n}","//Страница авторизации\r\n\r\nimport TemplateGen from '../utilities/TemplateGen';\r\nimport Form, { FormParams, onSubmitForm }  from '../elements/form-block';\r\nimport Input, { InputParams }  from '../elements/input-block';\r\nimport Button, { ButtonParams }  from '../elements/button-block';\r\nimport registration from './registration';\r\n\r\nconst authorizationForm: FormParams = {\r\n\ttitle: 'Вход',\r\n}\r\n\r\nconst authorizationInputs: InputParams[] = [\r\n\t{\r\n\t\telement: '.reg-form-fieldset',\r\n\t\tid: 'login',\r\n\t\tname: 'login',\r\n\t\tlabel: 'Логин',\r\n\t\tvalue: '',\r\n\t\ttype: 'text',\r\n\t\trequired: true,\r\n\t\terrorText: '',\r\n\t\tvalidationType: '',\r\n\t},\r\n\t{\r\n\t\telement: '.reg-form-fieldset',\r\n\t\tid: 'password',\r\n\t\tname: 'password',\r\n\t\tlabel: 'Пароль',\r\n\t\tvalue: '',\r\n\t\ttype: 'password',\r\n\t\trequired: true,\r\n\t\terrorText: '',\r\n\t\tvalidationType: '',\r\n\t},\r\n];\r\n\r\nconst authorizationButtons: ButtonParams[] = [\r\n\t{\r\n\t\telement: '.buttons-wrapper',\r\n\t\tid: '',\r\n\t\tname: 'Авторизоваться',\r\n\t\tclasses: 'add-link',\r\n\t\tonClick: (event) => {\r\n\t\t\tevent.preventDefault();\r\n\t\t\tonSubmitForm();\r\n\t\t},\r\n\t},\r\n\t{\r\n\t\telement: '.buttons-wrapper',\r\n\t\tid: '',\r\n\t\tname: 'Зарегистрироваться',\r\n\t\tclasses: 'reg-link',\r\n\t\tonClick: (event) => {\r\n\t\t\tevent.preventDefault();\r\n\t\t\tregistration();\r\n\t\t},\r\n\t},\r\n]\r\n\r\nexport default function(): void {\r\n\r\n\tnew Form(authorizationForm).insertBlock(\"#app\", true);\r\n\r\n\tauthorizationInputs.forEach(function(input) {\r\n\t\tnew Input(input).insertBlock(input.element);\r\n\t});\r\n\r\n\tauthorizationButtons.forEach(function(button) {\r\n\t\tnew Button(button).insertBlock(button.element);\r\n\t});\r\n}","import './scss/init.scss';\r\nimport authorization from './pages/authorization';\r\n\r\nfunction ready() {\r\n\tauthorization();\r\n\r\n\t/*let regButton: any = document.getElementById(\"regButton\");\r\n\tconsole.log(regButton);\r\n\tif (regButton){\r\n\t\tregButton.addEventListener(\"click\", function(){\r\n\t\t\tconsole.log(regButton);\r\n\t\t\treturn false;\r\n\t\t});\r\n\t}*/\r\n\r\n}\r\n\r\ndocument.addEventListener(\"DOMContentLoaded\", ready);"],"names":["$ea179994c2e62f0e$export$2e2bcd8739ae039","TEMPLATE_REGULAR","templateBlock","constructor","this","generateTemplate","template","changeTemplateKeys","tmp","templateRegular","templateKeys","exec","templateKey","key","templateValue","replace","toString","$c06e06c0e2a8e299$var$validationRegex","email","RegExp","login","name","phone","password","$c06e06c0e2a8e299$export$5ca26c99531348ec","input","validationType","getAttribute","errorText","value","regex","inputWrapper","parentElement","errorBlock","querySelector","test","classList","add","textContent","remove","$160682af531b0660$var$formBlockTemplate","params","render","insertBlock","element","clean","inner","DOMParser","parseFromString","getElementsByTagName","wrapper","document","innerHTML","appendChild","$160682af531b0660$export$163d82ae5407ed7c","form","console","log","inputs","querySelectorAll","infoBlock","isFormValid","repeatPassword","forEach","$3b5868aba66e82f2$var$inputBlockTemplate","$3b5868aba66e82f2$export$2e2bcd8739ae039","addEventListener","$56aaf2b78fa10785$export$2e2bcd8739ae039","onClick","$fb81a59f87df34a9$var$registrationForm","title","$fb81a59f87df34a9$var$registrationInputs","id","label","type","required","$fb81a59f87df34a9$var$registrationButtons","classes","event","preventDefault","$9d66ae0e255a5bf1$export$2e2bcd8739ae039","$9d66ae0e255a5bf1$var$authorizationForm","$9d66ae0e255a5bf1$var$authorizationInputs","$9d66ae0e255a5bf1$var$authorizationButtons","$160682af531b0660$export$2e2bcd8739ae039","button"],"version":3,"file":"index.b8d9281d.js.map","sourceRoot":"../"}